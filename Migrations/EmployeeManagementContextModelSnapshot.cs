// <auto-generated />
using System;
using EmployeeManagement.DataAccess.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EmployeeManagement.Migrations
{
    [DbContext(typeof(EmployeeManagementContext))]
    partial class EmployeeManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EmployeeManagement.DataAccess.Entities.ActualSalary", b =>
                {
                    b.Property<int>("ActualSalaryId")
                        .HasColumnType("int");

                    b.Property<double>("ContractSalary")
                        .HasColumnType("float");

                    b.Property<int>("DaysOff")
                        .HasColumnType("int");

                    b.Property<double>("FinalSalary")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ActualSalaryId");

                    b.HasIndex("UserId");

                    b.ToTable("ActualSalaries");
                });

            modelBuilder.Entity("EmployeeManagement.DataAccess.Entities.AttachedFile", b =>
                {
                    b.Property<int>("AttachedFileId")
                        .HasColumnType("int");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.HasKey("AttachedFileId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("AttachedFiles");
                });

            modelBuilder.Entity("EmployeeManagement.DataAccess.Entities.Claim", b =>
                {
                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.Property<string>("ClaimName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ClaimId");

                    b.ToTable("Claims");
                });

            modelBuilder.Entity("EmployeeManagement.DataAccess.Entities.RefreshToken", b =>
                {
                    b.Property<int>("RefreshTokenId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RefreshTokenString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("EmployeeManagement.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("EmployeeManagement.DataAccess.Entities.RoleClaim", b =>
                {
                    b.Property<int>("RoleClaims")
                        .HasColumnType("int");

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("RoleClaims")
                        .HasName("PK__RoleClai__6D815012315D6DA1");

                    b.HasIndex("ClaimId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("EmployeeManagement.DataAccess.Entities.Submission", b =>
                {
                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<int>("SubmissionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SubmissionId");

                    b.HasIndex("SubmissionTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("EmployeeManagement.DataAccess.Entities.SubmissionType", b =>
                {
                    b.Property<int>("SubmissionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SubmissionTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubmissionTypeId");

                    b.ToTable("SubmissionTypes");
                });

            modelBuilder.Entity("EmployeeManagement.DataAccess.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<double?>("ContractSalary")
                        .HasColumnType("float");

                    b.Property<int?>("DaysOff")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<DateTime?>("TokenCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TokenExpires")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EmployeeManagement.DataAccess.Entities.ActualSalary", b =>
                {
                    b.HasOne("EmployeeManagement.DataAccess.Entities.User", "User")
                        .WithMany("ActualSalaries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__ActualSal__UserI__36B12243");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EmployeeManagement.DataAccess.Entities.AttachedFile", b =>
                {
                    b.HasOne("EmployeeManagement.DataAccess.Entities.Submission", "Submission")
                        .WithMany("AttachedFiles")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__AttachedF__Submi__3A81B327");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("EmployeeManagement.DataAccess.Entities.RefreshToken", b =>
                {
                    b.HasOne("EmployeeManagement.DataAccess.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__RefreshTo__UserI__37A5467C");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EmployeeManagement.DataAccess.Entities.RoleClaim", b =>
                {
                    b.HasOne("EmployeeManagement.DataAccess.Entities.Claim", "Claim")
                        .WithMany("RoleClaims")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__RoleClaim__Claim__35BCFE0A");

                    b.HasOne("EmployeeManagement.DataAccess.Entities.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__RoleClaim__RoleI__34C8D9D1");

                    b.Navigation("Claim");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EmployeeManagement.DataAccess.Entities.Submission", b =>
                {
                    b.HasOne("EmployeeManagement.DataAccess.Entities.SubmissionType", "SubmissionType")
                        .WithMany("Submissions")
                        .HasForeignKey("SubmissionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Submissio__Submi__398D8EEE");

                    b.HasOne("EmployeeManagement.DataAccess.Entities.User", "User")
                        .WithMany("Submissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Submissio__UserI__38996AB5");

                    b.Navigation("SubmissionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EmployeeManagement.DataAccess.Entities.User", b =>
                {
                    b.HasOne("EmployeeManagement.DataAccess.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Users__roleId__33D4B598");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EmployeeManagement.DataAccess.Entities.Claim", b =>
                {
                    b.Navigation("RoleClaims");
                });

            modelBuilder.Entity("EmployeeManagement.DataAccess.Entities.Role", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EmployeeManagement.DataAccess.Entities.Submission", b =>
                {
                    b.Navigation("AttachedFiles");
                });

            modelBuilder.Entity("EmployeeManagement.DataAccess.Entities.SubmissionType", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("EmployeeManagement.DataAccess.Entities.User", b =>
                {
                    b.Navigation("ActualSalaries");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Submissions");
                });
#pragma warning restore 612, 618
        }
    }
}
